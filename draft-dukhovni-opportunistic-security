<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc3207 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3207.xml">
  <!ENTITY rfc4033 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4033.xml">
  <!ENTITY rfc4949 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4949.xml">
  <!ENTITY rfc5116 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5116.xml">
  <!ENTITY rfc5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
  <!ENTITY rfc5598 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5598.xml">
  <!ENTITY rfc6125 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6125.xml">
  <!ENTITY rfc6698 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6698.xml">
  <!ENTITY rfc7258 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7258.xml">
]>

<?rfc compact="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc strict="yes" ?>
<?rfc subcompact="no" ?>
<?rfc symrefs="yes" ?>
<?rfc toc="yes" ?>

<rfc submissionType="independent" category="info" docName="draft-dukhovni-opportunistic-security-@@VERSION@@" ipr="trust200902">
 <front>
  <title abbrev="Opportunistic Security">Opportunistic Security: Some
  Protection Most of the Time</title>
  <author initials="V." surname="Dukhovni" fullname="Viktor Dukhovni">
   <organization>Two Sigma</organization>
   <address>
    <email>ietf-dane@dukhovni.org</email>
   </address>
  </author>

  <date />

  <abstract>

   <t>
     This memo introduces the "Opportunistic Security" (OS) protocol
     design pattern.  Protocol designs based on OS depart from the
     established practice of employing cryptographic protection
     against both passive and active attacks, or no protection at
     all.  OS protocols tailor the minimum acceptable channel
     security to the capabilities of the peer systems.  As a result,
     at least some cryptographic protection is provided most of the
     time.
   </t>

   <t>
     This document is aimed primarily at protocol designers.  It
     facilitates designs that are more resistant to passive wiretaps,
     and designs in which cryptographic protection against active
     attacks can be rolled out incrementally as suitably capable
     systems are deployed.  Another audience is operators who set
     policy for systems that can implement opportunistic security.
   </t>

  </abstract>

 </front>

 <middle>
  <section title="Introduction">

   <t>
     Encryption is easy, but key management is difficult.  For
     example, the Public Key Infrastructure (PKI) used by the web
     (often called the "Web PKI") is based on broadly trusted public
     certification authorities (CAs).  The Web PKI has too many
     fully trusted authorities and imposes burdens that not all
     peers are willing to bear.  Web PKI public CAs are not always
     sufficient to authenticate the peer system.  Web PKI authentication
     is vulnerable to MiTM attacks when the peer reference identifier
     (<xref target="RFC6125"/>) is obtained indirectly over an
     insecure channel, perhaps via an MX or SRV lookup.  And with
     so many certification authorities the communicating parties
     don't always agree on a mutually trusted CA.
   </t>

   <t>
     At this time, DNS Security (DNSSEC <xref target="RFC4033"/>)
     is not sufficiently widely adopted to make DNS-Based Authentication
     of Named Entities (DANE <xref target="RFC6698"/>) a viable
     ubiquitous alternative to CAs.  Trust on first use (TOFU) key management
     models (such as saved SSH fingerprints and various certificate
     pinning approaches) don't protect initial contact, and require more
     user intervention when keys change unexpectedly.
   </t>

   <t>
     Historically, Internet security protocols have been designed
     or deployed with an "all or nothing" policy on the cryptographic
     protection that is provided.  The protection is comprehensive
     or else the access fails.  Protection against active attacks
     requires authenticated key agreement, or authentication for
     short.  We will also refer to its opposite, unauthenticated
     key agreement, simply as unauthenticated encryption.  Neither
     of the preceding are to be confused with the use or non-use
     of Authenticated Encryption with Associated Data (AEAD, <xref
     target="RFC5116"/>).
   </t>

   <t>
     The lack of a universal key management approach has created a
     situation in which only a minority of peers can be authenticated.
     When protocols only offer the choice between an authenticated
     encrypted channel or no protection, the result is that most
     traffic is sent in the clear.  The fact that most traffic is
     unencrypted makes pervasive monitoring easier by making it
     cost-effective, or at least not cost-prohibitive; see <xref
     target="RFC7258"/> for more detail.
   </t>

   <t>
     If security protocols were designed to encrypt traffic if
     possible, even without authentication, bulk collection of
     communications traffic would be substantially less attractive.
     Even if one is not concerned about pervasive monitoring, passive
     wiretaps by individual malicious actors or criminal organizations
     are still a potential problem for individuals and organizations.
     Traffic encryption makes passive attacks more difficult for
     all these actors.
   </t>

   <t>
     In order to make encryption more ubiquitous, authentication
     should not be required where it cannot be expected.  Against
     the background of pervasive monitoring and other passive
     attacks, if only unauthenticated encryption is possible, then
     it is still preferable to cleartext.
   </t>

   <t>
     The opportunistic security design pattern promotes stepping
     up from a permissive baseline security policy to the most
     secure policy compatible with the capabilities of a given peer.
     With each peer that advertises the requisite capabilities,
     protocols based on the opportunistic security design pattern
     employ unauthenticated encryption over cleartext, and authenticated
     rather than unauthenticated encryption.
   </t>

   <t>
     The risk of active attacks should not be ignored.  The
     opportunistic security design pattern features a range of
     cryptographic protection levels, with encrypted transmission
     accessible to most if not all peers.  Protocol designers are
     encouraged to produce protocols that can securely determine
     which peers support authentication, and can then establish
     authenticated communication channels resistant to active attacks
     with those peers.  However, opportunistically applied
     authentication must avoid deployment roadblocks and needs to
     be designed with care to "just work".
   </t>

   <t>
     Operators should of course be able specify explicit security
     policies that override opportunistic security where appropriate.
   </t>

  </section>

  <section title="Terminology" anchor="sec_terminology">

   <t>
     <list style="hanging">

       <t hangText="Perfect Forward Secrecy (PFS):"> As defined
       in <xref target="RFC4949"/>.  </t>

       <t hangText="Man-in-the-Middle (MiTM) attack:"> As defined
       in <xref target="RFC4949"/>.  </t>

       <t hangText="Trust on First Use (TOFU):">In a protocol, TOFU
       typically consists of accepting an asserted identity, without
       authenticating that assertion, and caching a key or credential
       associated with the identity.  Subsequent communication using the
       cached key/credential is secure against an MiTM attack, if such an
       attack did not succeed during the (vulnerable) initial
       communication or if the MiTM is not present for all subsequent
       communications.  The SSH protocol makes use of TOFU. The phrase
       "leap of faith" (LoF) is sometimes used as a synonym.  </t>

       <t hangText="Unauthenticated Encryption:">Encryption using
       a key agreement scheme that does not authenticate the
       identities of the peers.  In typical usage, this means that
       the initiator (client) has not verified the identity of the
       target (server), making MiTM attacks possible.  As noted in
       the introduction, unauthenticated encryption is not synonymous
       with non-use of AEAD <xref target="RFC5116"/>.  AEAD algorithms
       can be used with either authenticated or unauthenticated
       peers.  </t>

     </list>
   </t>

  </section>

  <section title="The Opportunistic Security Design Pattern">

   <t>
     Opportunistic Security is a protocol design pattern that aims
     to remove barriers to the widespread use of encryption on the
     Internet.  A related goal is broader adoption of protection
     against active attacks, by enabling incremental deployment of
     authenticated encryption.
   </t>

   <t>
     The opportunistic security design pattern permits a range of
     protection levels, while seeking the best protection possible.
     An opportunistic security protocol first determines the
     capabilities of a peer.  This might include whether that peer
     supports authenticated encryption, unauthenticated encryption
     or perhaps only cleartext.  The appropriate communications
     security policy is then employed for each peer.
   </t>

   <t>
     Peer capabilities can be advertised in-band or out-of-band and the
     selection process can be implicit or through an explicit
     negotiation.  An OS protocol may apply more stringent security
     settings with the underlying cryptographic mechanisms when
     authenticated encryption is required than when only unauthenticated
     encryption is employed.
   </t>

   <t>
     Security services that "just work" are more likely to be
     deployed and enabled by default.  When the advertised capabilities
     of peers match reality, an opportunistic security design avoids
     causing communications issues that would otherwise prevent the
     deployment of protocol security.
   </t>

   <t>
     The determination of which security mechanisms to use can vary
     from case to case when the OS design pattern is used with
     different protocols.  The protection provided by the OS pattern
     will depend on the protocol making use of the pattern.  In many
     cases, OS will result in negotiating channels with one of the
     following security properties:

     <list style="symbols">
      <t> No encryption (cleartext), which provides no protection
      against passive or active attacks.  </t>

      <t> Unauthenticated encryption, which protects only against
      passive attacks.  </t>

      <t> Authenticated encryption, which protects against both
      passive and active attacks.  </t>

     </list>
   </t>

   <t>
     Opportunistic security does not start with an over-estimate
     of peer capabilities only to settle for lesser protection when
     a peer fails to deliver.  Rather, opportunistic security defines
     a minimum protection level expected of all peers, which is
     exceeded for peers that are capable of more.
   </t>

   <t>
     Opportunistic security protocols should provide a means to
     enforce authentication for those peers for which authentication
     can be expected to succeed based on information advertised by
     the peer via DANE, TOFU or other means.  With DANE, the
     advertisement that a peer supports authentication is
     downgrade-resistant.  What is "opportunistic" here is the
     selective use of authentication for suitably capable peers;
     much in the same way as unauthenticated encryption may be
     used "opportunistically" with peers capable of more than
     cleartext.  Selectively requiring peer authentication in an
     opportunistic security protocol is not a contradiction in
     terms.
   </t>

   <t>
     With opportunistic security, authentication failure is reason
     to abort a connection to a peer that advertises authentication
     support.  With a peer that does not advertise authentication
     support, to which transmission even in cleartext is permissible,
     authentication checks may be automatically performed by the
     underlying cryptographic services when setting up an encrypted
     connection.  In such a case authentication failure must not
     lead to aborting the unauthenticated encrypted session and
     sending in the clear instead.
   </t>

   <t>
     Cleartext support is for backwards compatibility with already
     deployed systems.  Cleartext transmission should be avoided in
     new OS protocol designs.  Even when cleartext needs to be
     supported, protocol designs based on opportunistic security
     prefer to encrypt, allowing fallback to cleartext with peers
     that do not appear to be encryption capable.
   </t>

  </section>

  <section title="Opportunistic Security Design Principles">

   <t>
    <list style="hanging">

     <t hangText="Coexist with explicit policy:">Explicit security
     policy preempts opportunistic security.  Administrators or
     users can elect to disable opportunistic security for some or
     all peers and set a fixed security policy not based on
     capabilities advertised or published by the peer.  Alternatively,
     opportunistic security might be enabled only for specified
     peers, rather than by default.  Opportunistic security never
     displaces or preempts explicit policy.  Some applications or
     data may be too sensitive to employ opportunistic security,
     and more traditional security designs can be more appropriate
     in such cases.  </t>

     <t hangText="Prioritize enabling communication:"> The primary
     goal of designs that feature opportunistic security is to
     enable communication and maximize deployment.  If a non-negligible
     number of potential peers are only capable of cleartext, then
     it may be acceptable to employ cleartext when encryption is
     not possible.  If authentication is only possible for some
     peers, then it is likely best to require authentication for
     only those peers and not the rest.  Opportunistic security
     needs to be deployable incrementally, with each peer configured
     independently by its administrator or user.  Opportunistic
     security must not get in the way of two peers communicating
     when neither advertises or negotiates security services that
     are not in fact available or that don't function correctly.
     </t>

     <t hangText="Maximize security peer by peer:"> Opportunistic
     security strives to maximize security based on the capabilities
     of the peers.  Opportunistic security protocols may, when applicable,
     refuse to communicate with peers for which higher security is
     expected, but for some reason is not achieved.  The conditions
     under which connections fail should generally be limited to
     operational errors at one or the other peer or an active attack,
     so that well-maintained systems rarely encounter problems in
     normal use of opportunistic security.  </t>

     <t hangText="Encrypt by default:"> An opportunistic security
     protocol at least encrypts communications.  Opportunistic
     security protocols may tolerate cleartext only to ensure
     successful communication with legacy peers that don't support
     encryption or when encryption is disabled by local policy.
     Whenever possible, opportunistic security should employ Perfect
     Forward Secrecy (PFS) to make recovery of previously sent keys
     and plaintext computationally expensive even after disclosure
     of long-term keys.  </t>

     <t hangText="No misrepresentation of security:"> Unauthenticated
     encrypted communication must not be misrepresented as equivalent
     to communication over an authenticated encrypted channel.  </t>

    </list>
   </t>

   <t>
     In summary, the opportunistic security design pattern
     encompasses protocol designs that remove barriers to the
     widespread use of encryption on the Internet.  The actual
     protection provided by opportunistic security depends on the
     advertised capabilities of the communicating peers.
     Opportunistic security aims to encrypt all network traffic,
     while allowing fallback to cleartext with peers that do not
     appear to be encryption capable.
   </t>

  </section>

  <section title="Example: Opportunistic TLS in SMTP">

   <t>
     Many Message Transfer Agents (MTAs, <xref target="RFC5598"/>)
     support the STARTTLS (<xref target="RFC3207"/>) ESMTP extension,
     however STARTTLS support is not yet universal.  In the absence
     of local policy to the contrary, MTAs acting as SMTP clients
     are generally willing to send email in cleartext, but will
     employ TLS when the SMTP server's EHLO response advertises
     STARTTLS support.  Since the EHLO response is not cryptographically
     protected, this advertisement is vulnerable to MiTM downgrade
     attacks.  Thus opportunistic TLS based on STARTTLS support can
     only protect against passive attacks, and MTAs do not generally
     require peer authentication.  Self-signed certificates are
     common on receiving MTAs, and the server name is generally
     obtained via insecure MX lookups.
   </t>

   <t>
     Therefore, MTAs that implement opportunistic TLS employ at
     most unauthenticated encryption, or else deliver over a
     cleartext channel.  However, recent reports from a number
     of large providers suggest that the majority of SMTP email
     transmission on the Internet is now encrypted.  And the trend
     is toward increasing adoption.
   </t>

   <t>
     Not only is the STARTTLS advertisement is vulnerable to active
     attacks, but also at present some MTAs that advertise STARTTLS
     exhibit various interoperability problems in their implementations.
     As a result, it is common practice to fall back to cleartext
     transmission not only when STARTTLS is not offered, but also
     when the TLS handshake fails, or even when TLS fails during
     message transmission.
   </t>

   <t>
     Some MTAs employing STARTTLS (<xref target="RFC3207"/>) have
     been observed to abandon Transport Layer Security (TLS) <xref
     target="RFC5246"/> encrypted transmission when the receiving
     MTA fails authentication, only to immediately deliver the same
     message over a cleartext connection.  The OS design pattern
     avoids this obvious problem.
   </t>

  </section>

  <section title="Security Considerations" anchor="sec_security">

    <t>
      Though opportunistic security potentially supports transmission
      in cleartext, unauthenticated encryption, or other cryptographic
      protection levels short of the strongest potentially applicable,
      the effective security for peers is always increased and never
      reduced.  If a cryptographic capability is neither required
      by policy nor supported by the peer, nothing is lost by going
      without.  Opportunistic security is strictly stronger than
      the alternative of providing no security services when maximal
      security is not applicable.
    </t>

    <t>
      Opportunistic security does not require reducing security
      policy to the lowest common denominator.  Opportunistic
      security coexists with and is preempted by any a-priori security
      policy that is not based on advertised peer capabilities.
      However, such a-priori policy can be counter-productive when
      it expects more than most peers can in fact deliver.  A-priori
      policy should be used with care, lest users find it too
      restrictive and act to disable security entirely.  Opportunistic
      security aims to enable incremental rollout of cryptographic
      protection against both passive and active attacks as appropriate
      software and configurations are deployed one system at a time.
    </t>

  </section>

  <section anchor="Acknowledgements" title="Acknowledgements">

    <t>
      I would like to thank Steve Kent.  Some of the text in this
      document is based on his earlier draft.  I would also like
      to thank Dave Crocker, Paul Hoffman, Scott Kitterman, Martin
      Thomson, Nico Williams, Paul Wouters and Stephen Farrell for
      their helpful suggestions and support.
    </t>

  </section><!-- Acknowledgements -->

 </middle>

 <back>
  <references>
   &rfc3207;
   &rfc4033;
   &rfc4949;
   &rfc5116;
   &rfc5246;
   &rfc5598;
   &rfc6125;
   &rfc6698;
   &rfc7258;
  </references>
 </back>
</rfc>
