<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY rfc3207 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3207.xml">
  <!ENTITY rfc4033 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4033.xml">
  <!ENTITY rfc4949 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4949.xml">
  <!ENTITY rfc5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
  <!ENTITY rfc5598 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5598.xml">
  <!ENTITY rfc6125 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6125.xml">
  <!ENTITY rfc6698 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6698.xml">
  <!ENTITY rfc7258 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7258.xml">
]>

<?rfc compact="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc strict="yes" ?>
<?rfc subcompact="no" ?>
<?rfc symrefs="yes" ?>
<?rfc toc="yes" ?>

<rfc submissionType="independent" category="info" docName="draft-dukhovni-opportunistic-security-@@VERSION@@" ipr="trust200902">
 <front>
  <title abbrev="Opportunistic Security">Opportunistic Security: Some
  Protection Most of the Time</title>
  <author initials="V." surname="Dukhovni" fullname="Viktor Dukhovni">
   <organization>Two Sigma</organization>
   <address>
    <email>ietf-dane@dukhovni.org</email>
   </address>
  </author>

  <date />

  <abstract>

   <t>
     This memo introduces the "Opportunistic Security" (OS) protocol
     design pattern.  Protocol designs based on OS depart from the
     established practice of employing cryptographic protection
     against both passive and active attacks, or no protection at
     all.  OS protocols tailor the minimum acceptable channel
     security to the capabilities of the peer systems.  As a result,
     at least some cryptographic protection is provided most of the
     time.
   </t>

   <t>
     This document is aimed primarily at protocol designers who
     want to make their protocols more resistant to Pervasive
     Monitoring (PM, <xref target="RFC7258"/>).  Additionally, this
     draft facilitates designs that make it possible to roll out
     cryptographic protection against active attacks incrementally
     as suitably capable systems are deployed.  Another audience
     is operators who set policy for systems that can implement
     opportunistic security.
   </t>

  </abstract>

 </front>

 <middle>
  <section title="Introduction">

   <t>
     Encryption is easy, but key management is difficult.  No single
     key management approach has seen universal adoption.  The Web
     PKI key management system, which is based on broadly trusted
     public certification authorities (CAs), has too many trusted
     authorities and imposes burdens that not all peers are willing
     to bear.  In addition, web PKI public CAs are not sufficient
     to secure communications when the peer reference identifier
     (Section 1.8 of <xref target="RFC6125"/>) is obtained indirectly
     over an insecure channel, or when the communicating parties don't agree
     on a trusted CA.
   </t>

   <t>
     At this time, DNS Security (DNSSEC <xref target="RFC4033"/>)
     is not sufficiently widely adopted to make DNS-Based Authentication
     of Named Entities (DANE <xref target="RFC6698"/>) a viable
     ubiquitous alternative to CAs.  Trust on first use (TOFU) key management
     models (such as saved SSH fingerprints and various certificate
     pinning approaches) don't protect initial contact, and require more
     user intervention when keys change unexpectedly.
   </t>

   <t>
     Historically, Internet security protocols have prioritized
     comprehensive cryptographic protection against both passive and active
     attacks.  Protection against active attacks requires authentication,
     but the lack of a universal key management approach has created
     a situation in which only a minority of peers can be authenticated.
     When protocols only offer the options of an authenticated
     secure channel or cleartext, most traffic is sent in the clear.
     As a result, while communications traffic is sometimes strongly
     protected, more typically it is not protected at all.  The
     fact that most traffic is unencrypted makes
     pervasive monitoring by  nation-stats easier by making
     it cost-effective, or at least not cost-prohibitive; see <xref target="RFC7258"/>
     for more detail.
   </t>

   <t>
     If security protocols were designed to encrypt traffic whenever
     possible, bulk collection of communications traffic would be
     substantially less attractive.  Even if one is not concerned
     about nation-state pervasive monitoring, passive wiretaps by
     individual malicious actors or criminal organizations is still
     a potential problem for individuals and organizations.  Using
     the opportunistic security design makes passive attacks more
     difficult for all these actors.
   </t>

   <t>
     In order to make encryption more ubiquitous, authentication
     should not be required where it cannot be expected.  Against
     the background of pervasive monitoring and other passive
     attacks, when authenticated communication is not possible,
     unauthenticated encryption is preferable to cleartext.  The
     opportunistic security design pattern promotes stepping up
     from cleartext, not down from authenticated encryption.
     Opportunistic security encourages peers to employ as much
     security as possible, without falling back on unnecessarily
     weak options.  In particular, opportunistic security encourages
     unauthenticated encryption rather than cleartext when
     authentication is not an option.
   </t>

   <t>
     The risk of active attacks should also not be ignored.  The
     opportunistic security design pattern can operate at a range
     of cryptographic protection levels, with encrypted transmission
     accessible to most if not all peers.  Even with opportunistic
     security, protection against active attacks is still employed
     where unconditionally required by policy or else determined
     to be applicable with a given peer.
   </t>

  </section>

  <section title="Terminology" anchor="sec_terminology">

   <t>
     The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
     NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
     "MAY", and "OPTIONAL" in this document are to be interpreted
     as described in <xref target="RFC2119"/>.  In this document,
     these key words are used to avoid security lapses, rather
     than to ensure interoperability.  In any case, the OS design
     pattern also promotes interoperability.
   </t>

   <t>
     <list style="hanging">
       <t hangText="Perfect Forward Secrecy (PFS):"> For a key
       agreement protocol, the property that compromises long-term
       keying material does not compromise session keys that were
       previously derived from the long-term material.  (Definition
       taken from <xref target="RFC4949"/>.) </t>

       <t hangText="Man-in-the-Middle (MiTM) attack:"> A form of
       active wiretapping attack in which the attacker intercepts
       and selectively modifies communicated data to masquerade as
       one or more of the entities involved in a communication
       association.  (Definition taken from <xref target="RFC4949"/>).
       Masquerading enables the MiTM to violate the confidentiality
       and/or the integrity of communicated data passing through
       it.  </t>

       <t hangText="Trust on First Use (TOFU):">In a protocol, TOFU
       typically consists of accepting an asserted identity, without
       authenticating that assertion, and caching a key or credential
       associated with the identity.  Subsequent communication using the
       cached key/credential is secure against an MiTM attack, if such an
       attack did not succeed during the (vulnerable) initial
       communication or if the MiTM is not present for all subsequent
       communications.  The SSH protocol makes use of TOFU. The phrase
       "leap of faith" (LoF) is sometimes used as a synonym.</t>

       <t hangText="Unauthenticated Encryption:">Encryption using
       a key agreement technique that does not authenticate the
       identities of the peers.  In typical usage, this means that
       the initiator (client) has not verified the identity of the
       target (server), making MiTM attacks possible.  </t>
     </list>
   </t>

  </section>

  <section title="The Opportunistic Security Design Pattern">

   <t>
     Opportunistic Security is a protocol design pattern that aims
     to remove barriers to the widespread use of encryption on the
     Internet.  The actual protection provided by opportunistic
     security depends on the advertised (in-band) or published
     (out-of-band) capabilities of the communicating peers.  The
     granularity of the applicable protection level for OS is rather coarse.
     It is anticipated that in most cases, the protection level is
     a choice between one of the following:
   </t>

   <t>
       <list style="symbols">
	 <t>
	   No encryption (cleartext), which protects against neither
	   passive nor active attacks.
	 </t> <t>
	   Unauthenticated encryption, which protects only against
	   passive attacks.
	 </t> <t>
	   Authenticated encryption, which protects against both
	   passive and active attacks.
	 </t>
       </list>
   </t>

   <t>
     Note that the opportunistic security design pattern is not limited to unauthenticated
     encryption.  Opportunistic security protocols should, provide
     a means to enforce authentication for those peers for which
     authentication is required by policy or can be expected to
     succeed based on information provided by the peer.  Enforcement
     of authentication in an opportunistic protocol is not a
     contradiction.
   </t>

   <t>
     Opportunistic security does not start with an overly optimistic
     view of peer capabilities only to be "disappointed" and settle
     for less when the peer fails to live up to expectations.
     Rather, the opportunistic security design pattern starts with
     a pessimistic view of the baseline capabilities of all peers,
     and is "pleasantly surprised" to learn that some peers can be
     expected to do more.  Opportunistic security aims to do better
     than might be expected, rather than worse than might be hoped.
   </t>

   <t>
     For example, some peers may commit to support authentication
     via DANE, TOFU or other means.  With DANE, the discovery via
     DNSSEC-validated TLSA records that a peer is committed to
     support authentication is downgrade-resistant.  Since DNSSEC
     provides authenticated denial of existence, an MiTM attacker
     needs to compromise DNSSEC in order to suppress a peer's TLSA
     records.
  </t>

  <t>
    Unless preempted by local or other policy, an opportunistic
    security protocol first determines for a given peer whether
    that peer supports authenticated encryption, unauthenticated
    encryption or perhaps only cleartext.  The appropriate
    communications security policy is then employed for each peer.
  </t>

  <t>
     In the opportunistic security design pattern, authentication
     failure MAY be a reason to abort a connection to a peer that
     is expected to be authenticated.  However, such a failure MUST
     NOT then lead to communication in cleartext when encryption
     is an option.  Some Message Transfer Agents (MTAs, <xref
     target="RFC5598"/> Section 4.3.2) employing STARTTLS (<xref
     target="RFC3207"/>) have been observed to abort TLS (<xref
     target="RFC5246"/>) transmission when the receiving MTA fails
     authentication, only to immediately deliver the same message
     over a cleartext connection.  The OS design pattern always
     prevents this obvious problem.
   </t>

   <t>
     More fine-grained security policy, such as the selection of a
     particular encryption algorithm or key agreement scheme, is
     left to the underlying cryptographic protocols such as TLS.
     The underlying cryptographic protocols themselves cannot be
     said to implement opportunistic security or to lack it; they
     typically allow implementation and operational policies that
     are based on the OS design pattern.  An OS protocol may demand
     more stringent security from the underlying cryptographic
     protocols when authenticated encryption is required than when
     only unauthenticated encryption is employed.
   </t>

   <t>
     Cleartext support is for backwards compatibility with already
     deployed systems.  Cleartext transmission should, be avoided
     in new OS protocol designs.  Even when cleartext needs to be
     supported, protocol designs based on opportunistic security
     MUST at least prefer to encrypt network traffic, while allowing
     fallback to cleartext with peers that do not appear to be
     encryption capable.
   </t>

  </section>

  <section title="Opportunistic Security Design Principles">

   <t>
    <list style="hanging">

     <t hangText="Coexist with explicit policy:">Explicit security
     policy preempts opportunistic behavior.  Administrators or
     users may elect to disable opportunistic security for some or
     all peers and set a fixed security policy not based on
     capabilities advertised or published by the peer.  Alternatively,
     opportunistic security might be enabled only for specified peers,
     rather than by default.  Opportunistic security is not intended
     to displace or preempt local policy.  However, it is expected that
     where static policy is in conflict with reality, opportunistic
     security will lead to better outcomes.  </t>

     <t hangText="Prioritize not getting in the way:">
     The primary goal of designs that feature opportunistic security
     is to enable communication and maximize deployment.  If a
     non-negligible number of potential peers are only capable of
     cleartext, then it is acceptable to fall back to cleartext
     when encryption is not possible.  If authentication is only
     possible for some peers, then it is acceptable to authenticate
     only those peers and not the rest.  Communication must be
     possible without prior coordination of security policy by the
     administrators of the peer systems.  Opportunistic security
     needs to be deployable with each peer independently configured
     to meet its security needs (within the practical bounds of the
     employed protocol).  Opportunistic security must not get in
     the way of the peers communicating if neither end is misconfigured
     (i.e., neither publishes or negotiates security services that
     are not available or don't function correctly).  </t>

     <t hangText="Maximize security peer by peer:"> Opportunistic
     security strives to maximize security based on the capabilities
     of the peers.  For some opportunistic security protocols, the
     maximal cryptographic protection possible may be just
     unauthenticated encryption to address passive wiretaps.  For
     other protocols, protection against active attacks may be an
     option.  Opportunistic security protocols may, when applicable,
     refuse to communicate with peers for which higher security is
     expected, but for some reason not achieved.  The conditions
     under which connections fail should generally be limited to
     operational errors at one or the other peer or an active attack,
     so that well-maintained systems rarely encounter problems in
     normal use of opportunistic security.  </t>

     <t hangText="Encrypt by default:"> An opportunistic security
     protocol MUST be capable of achieving at least unauthenticated
     encryption between peer systems that don't explicitly disable
     this capability.  To facilitate incremental deployment,
     opportunistic security protocols may tolerate cleartext
     connections or sessions with peers that don't support encryption.
     Over time, as peer software is updated to support opportunistic
     security, only legacy systems or a minority of systems where
     encryption is disabled should be communicating in cleartext.
     Whenever possible, opportunistic security should employ Perfect
     Forward Secrecy (PFS) to make recovery of previously sent keys
     and plaintext computationally expensive even after disclosure
     of long-term keys.  </t>

     <t hangText="No misrepresentation of security:"> Unauthenticated
     encrypted communication MUST not be misrepresented as communication
     over a secure channel.  </t>
    </list>
   </t>

   <t>
     In summary, the opportunistic security design pattern encompasses
     protocol designs that remove barriers to the widespread use
     of encryption on the Internet.  The actual protection provided
     by opportunistic security depends on the advertised (in-band)
     or published (out-of-band) capabilities of the communicating
     peers.  Opportunistic security MUST at least aim to encrypt
     network traffic, while allowing fallback to cleartext with
     peers that do not appear to be encryption capable.
   </t>

  </section>

  <section title="Security Considerations" anchor="sec_security">

    <t>
      Though opportunistic security potentially supports transmission in
      cleartext, unauthenticated encryption, or other protection levels
      short of the strongest potentially applicable, the effective
      security for users is always increased and never reduced.  If
      security is not required by policy or securely negotiated, nothing
      is lost by allowing weaker protection levels.  Opportunistic
      security is strictly stronger than the alternative of providing no
      security services when maximal security is not applicable.
    </t>

  </section>

  <section anchor="Acknowledgements" title="Acknowledgements">

    <t>
      I would like to thank Steve Kent.  Some of the text in this
      document is based on his earlier draft.
    </t>

  </section><!-- Acknowledgements -->

 </middle>

 <back>
  <references>
   &rfc2119;
   &rfc3207;
   &rfc4033;
   &rfc4949;
   &rfc5246;
   &rfc5598;
   &rfc6125;
   &rfc6698;
   &rfc7258;
  </references>
 </back>
</rfc>
